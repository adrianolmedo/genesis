package store

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/adrianolmedo/genesis"
	"github.com/adrianolmedo/genesis/pgsql"
	"github.com/adrianolmedo/genesis/pgsql/sqlc/dbgen"
	"github.com/jackc/pgx/v5"
	"github.com/pborman/uuid"
)

// CustomerRepo manages the Customer storage.
type CustomerRepo struct {
	q *dbgen.Queries // methods generated by sqlc
}

// NewCustomerRepo creates a new Customer repository instance.
func NewCustomerRepo(db dbgen.DBTX) *CustomerRepo {
	return &CustomerRepo{
		q: dbgen.New(db),
	}
}

// Create creates a new customer in the database.
func (r *CustomerRepo) Create(ctx context.Context, m *Customer) error {
	m.UUID = genesis.NextUUID()
	m.CreatedAt = time.Now()
	id, err := r.q.CustomerCreate(ctx, dbgen.CustomerCreateParams{
		Uuid:      uuid.Parse(m.UUID),
		FirstName: m.FirstName,
		LastName:  m.LastName,
		Email:     m.Email,
		Password:  m.Password,
		CreatedAt: m.CreatedAt,
	})
	if err != nil {
		return err
	}
	m.ID = id
	return nil
}

// List retrieves a paginated list of customers from the database.
// TODO: add mapping to domain.Customer
func (r *CustomerRepo) List(ctx context.Context, p pgsql.Pager) (pgsql.PagerResult, error) {
	rows, err := r.q.CustomerListAsc(ctx, dbgen.CustomerListAscParams{
		Sort:   p.Sort(),
		Offset: int32(p.Offset()),
		Limit:  int32(p.Limit()),
	})
	if err != nil {
		return pgsql.PagerResult{}, err
	}
	totalRows, err := r.q.CustomerListCount(ctx)
	if err != nil {
		return pgsql.PagerResult{}, err
	}
	return p.Paginate(rows, totalRows), nil
}

// Delete soft deletes a customer by setting the DeletedAt field.
func (r *CustomerRepo) Delete(ctx context.Context, id int64) error {
	_, err := r.q.CustomerDelete(ctx, dbgen.CustomerDeleteParams{
		ID:        id,
		DeletedAt: sql.NullTime{Time: time.Now(), Valid: true},
	})
	if errors.Is(err, sql.ErrNoRows) || errors.Is(err, pgx.ErrNoRows) {
		return ErrCustomerNotFound
	}
	if err != nil {
		return err
	}
	return nil
}
