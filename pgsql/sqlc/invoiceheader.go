package sqlc

import (
	"context"
	"fmt"

	domain "github.com/adrianolmedo/genesis"
	"github.com/adrianolmedo/genesis/pgsql/sqlc/dbgen"
	"github.com/jackc/pgx/v5"

	"github.com/pborman/uuid"
)

// InvoiceHeader repository.
type InvoiceHeader struct {
	q *dbgen.Queries // methods generated by sqlc
}

// NewInvoiceHeader creates a new InvoiceHeader repository.
func NewInvoiceHeader(db dbgen.DBTX) *InvoiceHeader {
	return &InvoiceHeader{
		q: dbgen.New(db),
	}
}

func (ih InvoiceHeader) Create(tx pgx.Tx, m *domain.InvoiceHeader) error {
	m.UUID = domain.NextUUID()

	row, err := ih.q.WithTx(tx).InvoiceHeaderCreate(context.Background(), dbgen.InvoiceHeaderCreateParams{
		Uuid:     uuid.Parse(m.UUID),
		ClientID: m.ClientID,
	})
	if err != nil {
		return err
	}

	m.ID = row.ID
	return nil
}

// DeleteAll delete all invoice headers (permanantly).
func (ih InvoiceHeader) DeleteAll() error {
	err := ih.q.InvoiceHeaderDeleteAll(context.Background())
	if err != nil {
		return fmt.Errorf("can't truncate table: %v", err)
	}
	return nil
}
