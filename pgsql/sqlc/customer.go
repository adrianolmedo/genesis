package sqlc

import (
	"context"
	"database/sql"
	"errors"
	"time"

	domain "github.com/adrianolmedo/genesis"
	"github.com/adrianolmedo/genesis/pgsql"
	"github.com/adrianolmedo/genesis/pgsql/sqlc/dbgen"

	"github.com/jackc/pgx/v5"
	"github.com/pborman/uuid"
)

// Customer repository.
type Customer struct {
	q *dbgen.Queries // methods generated by sqlc
}

// NewCustomer creates a new Customer repository.
func NewCustomer(db dbgen.DBTX) *Customer {
	return &Customer{
		q: dbgen.New(db),
	}
}

// Create creates a new customer in the database.
func (r Customer) Create(ctx context.Context, m *domain.Customer) error {
	m.UUID = domain.NextUUID()
	m.CreatedAt = time.Now()

	id, err := r.q.CustomerCreate(ctx, dbgen.CustomerCreateParams{
		Uuid:      uuid.Parse(m.UUID),
		FirstName: m.FirstName,
		LastName:  m.LastName,
		Email:     m.Email,
		Password:  m.Password,
		CreatedAt: m.CreatedAt,
	})
	if err != nil {
		return err
	}

	m.ID = id
	return nil
}

// List retrieves a paginated list of customers from the database.
func (r Customer) List(ctx context.Context, p *pgsql.Pager) (pgsql.PagerResults, error) {
	customers, err := r.q.CustomerListAsc(ctx, dbgen.CustomerListAscParams{
		Sort:   p.Sort(),
		Offset: int32(p.Offset()),
		Limit:  int32(p.Limit()),
	})
	if err != nil {
		return pgsql.PagerResults{}, err
	}

	totalRows, err := r.q.CustomerListCount(context.Background())
	if err != nil {
		return pgsql.PagerResults{}, err
	}

	return p.Paginate(customers, totalRows), nil
}

// Delete soft deletes a customer by setting the DeletedAt field.
func (r Customer) Delete(ctx context.Context, id int64) error {
	_, err := r.q.CustomerDelete(ctx, dbgen.CustomerDeleteParams{
		ID:        id,
		DeletedAt: sql.NullTime{Time: time.Now(), Valid: true},
	})
	if errors.Is(err, sql.ErrNoRows) || errors.Is(err, pgx.ErrNoRows) {
		return domain.ErrCustomerNotFound
	}

	if err != nil {
		return err
	}
	return nil
}
