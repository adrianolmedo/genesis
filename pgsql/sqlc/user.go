package sqlc

import (
	"context"
	"database/sql"
	"time"

	domain "github.com/adrianolmedo/genesis"
	"github.com/adrianolmedo/genesis/pgsql"
	"github.com/adrianolmedo/genesis/pgsql/sqlc/dbgen"
)

// User repository.
type User struct {
	db dbgen.DBTX     // Query, QueryRow, Exec
	q  *dbgen.Queries // methods generated by sqlc
}

func NewUser(conn dbgen.DBTX) *User {
	return &User{
		q:  dbgen.New(conn),
		db: conn,
	}
}

func (r User) Create(m *domain.User) error {
	m.UUID = domain.NextUUID()
	m.CreatedAt = time.Now()

	id, err := r.q.UserCreate(context.Background(), dbgen.UserCreateParams{
		FirstName: m.FirstName,
		LastName:  m.LastName,
		Email:     m.Email,
		Password:  m.Password,
		CreatedAt: m.CreatedAt,
	})

	if err != nil {
		return err
	}

	m.ID = id

	return nil
}

// ByLogin get a User from its login data.
func (r User) ByLogin(email, pass string) error {
	id, err := r.q.UserByLogin(context.Background(), dbgen.UserByLoginParams{
		Email:    email,
		Password: pass,
	})
	if err != nil {
		return err
	}

	if id == 0 {
		return domain.ErrUserNotFound
	}

	return nil
}

// ByID get a User from its id.
func (r User) ByID(id int64) (*domain.User, error) {
	m, err := r.q.UserByID(context.Background(), id)
	if err != nil {
		return nil, err
	}

	return &domain.User{
		ID:        m.ID,
		UUID:      m.Uuid.String(),
		FirstName: m.FirstName,
		LastName:  m.LastName,
		Email:     m.Email,
		Password:  m.Password,
	}, nil
}

// Update user.
func (r User) Update(m domain.User) error {
	return r.q.UserUpdate(context.Background(), dbgen.UserUpdateParams{
		ID:        m.ID,
		FirstName: m.FirstName,
		LastName:  m.LastName,
		Email:     m.Email,
		Password:  m.Password,
		UpdatedAt: pgsql.ToNullTime(m.UpdatedAt),
	})
}

func (r User) All(p *pgsql.Pager) (pgsql.PagerResults, error) {
	query := `SELECT id, uuid, first_name, last_name, email, password, created_at, updated_at, deleted_at FROM "user" WHERE deleted_at IS NULL`
	query += " " + p.OrderBy()
	query += " " + p.LimitOffset()

	rows, err := r.db.Query(context.Background(), query)
	if err != nil {
		return pgsql.PagerResults{}, err
	}
	defer rows.Close()

	users := make(domain.Users, 0)

	for rows.Next() {
		var updatedAtNull, deletedAtNull sql.NullTime
		m := &domain.User{}

		err := rows.Scan(
			&m.ID,
			&m.UUID,
			&m.FirstName,
			&m.LastName,
			&m.CreatedAt,
			&updatedAtNull,
			&deletedAtNull,
		)
		if err != nil {
			return pgsql.PagerResults{}, err
		}

		m.UpdatedAt = pgsql.ToTimePtr(updatedAtNull)
		m.DeletedAt = pgsql.ToTimePtr(deletedAtNull)

		users = append(users, m)
	}

	if err := rows.Err(); err != nil {
		return pgsql.PagerResults{}, err
	}

	// Get total rows to calculate total pages.
	var totalRows int64
	err = r.db.QueryRow(context.Background(), `SELECT COUNT (*) FROM "user" WHERE deleted_at IS NULL`).Scan(&totalRows)
	if err != nil {
		return pgsql.PagerResults{}, err
	}

	return p.Paginate(users, totalRows), nil
}
