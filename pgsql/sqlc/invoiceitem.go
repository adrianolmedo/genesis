package sqlc

import (
	"context"
	"fmt"

	domain "github.com/adrianolmedo/genesis"

	"github.com/adrianolmedo/genesis/pgsql/sqlc/dbgen"
)

// InvoiceItem repository.
type InvoiceItem struct {
	db dbgen.DBTX     // Query, QueryRow, Exec
	q  *dbgen.Queries // methods generated by sqlc
}

// NewInvoiceItem creates a new InvoiceItem repository.
func NewInvoiceItem(db dbgen.DBTX) *InvoiceItem {
	return &InvoiceItem{
		db: db,
		q:  dbgen.New(db),
	}
}

// Create creates items associated with a header and product for the invoice.
func (ii InvoiceItem) Create(headerID int64, items domain.ItemList) error {
	for _, item := range items {
		row, err := ii.q.InvoiceItemCreate(context.Background(), dbgen.InvoiceItemCreateParams{
			InvoiceHeaderID: headerID,
			ProductID:       item.ProductID,
		})
		if err != nil {
			return err
		}

		item.ID = row.ID
		item.CreatedAt = row.CreatedAt

	}
	return nil
}

// DeleteAll deletes all invoice items.
// This is used for testing purposes to reset the state of the invoice items table.
func (ii InvoiceItem) DeleteAll() error {
	err := ii.q.InvoiceItemDeleteAll(context.Background())
	if err != nil {
		return fmt.Errorf("can't truncate table: %v", err)
	}
	return nil
}
