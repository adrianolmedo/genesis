// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package dbgen

import (
	"context"
	"database/sql"
	"time"

	"github.com/pborman/uuid"
)

const userByID = `-- name: UserByID :one
SELECT id, uuid, first_name, last_name, email, password, created_at, updated_at, deleted_at FROM "user" WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) UserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, userByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userByLogin = `-- name: UserByLogin :one
SELECT id FROM "user" WHERE email = $1 AND password = $2 AND deleted_at IS NULL
`

type UserByLoginParams struct {
	Email    string
	Password string
}

func (q *Queries) UserByLogin(ctx context.Context, arg UserByLoginParams) (int64, error) {
	row := q.db.QueryRow(ctx, userByLogin, arg.Email, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const userCreate = `-- name: UserCreate :one
INSERT INTO "user" 
(uuid, first_name, last_name, email, password, created_at)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type UserCreateParams struct {
	Uuid      uuid.UUID
	FirstName string
	LastName  string
	Email     string
	Password  string
	CreatedAt time.Time
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (int64, error) {
	row := q.db.QueryRow(ctx, userCreate,
		arg.Uuid,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const userDelete = `-- name: UserDelete :one
UPDATE "user" SET deleted_at = $1 WHERE id = $2 RETURNING id
`

type UserDeleteParams struct {
	DeletedAt sql.NullTime
	ID        int64
}

func (q *Queries) UserDelete(ctx context.Context, arg UserDeleteParams) (int64, error) {
	row := q.db.QueryRow(ctx, userDelete, arg.DeletedAt, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const userDeleteAll = `-- name: UserDeleteAll :exec
TRUNCATE TABLE "user" RESTART IDENTITY
`

func (q *Queries) UserDeleteAll(ctx context.Context) error {
	_, err := q.db.Exec(ctx, userDeleteAll)
	return err
}

const userHardDelete = `-- name: UserHardDelete :one
DELETE FROM "user" WHERE id = $1 RETURNING id
`

func (q *Queries) UserHardDelete(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, userHardDelete, id)
	err := row.Scan(&id)
	return id, err
}

const userListAsc = `-- name: UserListAsc :many
SELECT id, uuid, first_name, last_name, email, password, created_at, updated_at, deleted_at FROM "user" WHERE deleted_at IS NULL ORDER BY $3::text ASC LIMIT $1 OFFSET $2
`

type UserListAscParams struct {
	Limit  int32
	Offset int32
	Sort   string
}

func (q *Queries) UserListAsc(ctx context.Context, arg UserListAscParams) ([]User, error) {
	rows, err := q.db.Query(ctx, userListAsc, arg.Limit, arg.Offset, arg.Sort)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListCount = `-- name: UserListCount :one
SELECT COUNT (*) FROM "user" WHERE deleted_at IS NULL
`

func (q *Queries) UserListCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, userListCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userUpdate = `-- name: UserUpdate :one
UPDATE "user" SET first_name = $1, last_name = $2, email = $3, password = $4, updated_at = $5 WHERE id = $6 RETURNING id
`

type UserUpdateParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
	UpdatedAt sql.NullTime
	ID        int64
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) (int64, error) {
	row := q.db.QueryRow(ctx, userUpdate,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.UpdatedAt,
		arg.ID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
